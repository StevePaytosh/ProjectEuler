/*
 * Project Euler: Problem 2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

public class Euler2
{
	public static void main(String[] args)
	{
		int sum=0; // variable will hold the sum of all appropriate values 
		int lastValue=1; // stores the last value in the sequence
		int nextLastValue=0; // stores the second latest value is a sequence
		int rangeMax=4000000; // the last value in a given range (i.e from 1-100 rangeMax is 100)
		int hold=0;
		int i=0;
		
		while(lastValue<=rangeMax)  // i will be the position in the Fibbonacci sequence (i1==, i2=2, i3=3, i4=5, i5=8...)  
		{
			hold=nextFibbonacci(lastValue, nextLastValue);
			
			if(hold%2==0)  // checks to see if the current Fibbonacci number is divisible by 2
			{
				sum+=hold; // adds the current number to the sum
			
			} // ends if statement
			
			nextLastValue=lastValue; // sets the most recent Fibbonacci number to nextLast
			lastValue=hold; // sets out current Fibbonacci to the last Fibbonacci
			
			
		} // ends while loop
		
		System.out.println("sum= "+sum);
		
	}
	

	public static int nextFibbonacci(int lastValue, int nextLastValue)
	{
		System.out.println(lastValue+ nextLastValue);
		return lastValue+ nextLastValue;
		
	}
}
