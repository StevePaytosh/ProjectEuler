/* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors? 
*/

/*
 * To analyze the problem
 * 1) produce a new triangle number /
 * 2) cycle through the possible divisors
 * 3) if a divisors works, add it to the array
 * 		- if the divisor already exists, increment the number of the occurences for this divisors
 * 4) check if the array is full, if it is, flag a boolean as true and end the program on that number
 */

public class Euler12
{
	StringBuilder trigNumbers= new StringBuilder();
	StringBuilder divisors= new StringBuilder();
	final int numDivisors=501;
	int currentDivisor=1;
	int lastTriangleNumber=1;
	int currentTriangleNumber=1;
	int triangleIndex=1;
	int factors=0;
	final long startTime= System.currentTimeMillis();
	
	boolean isFull=false;
	
	public static void main(String[] args)
	{
		Euler12 method= new Euler12();
	}
	
	Euler12()
	{
		while(!isFull)
		{	
			factors=0;
			findNextTrig();
			findDiv();
			//System.out.println("end first loop, currentTriangleNumber=" + currentTriangleNumber);
	
		} // ends while loop
		
		System.out.println("Answer: " + currentTriangleNumber);
		System.out.println("Run Time: " + (System.currentTimeMillis()-startTime)/1000 + "s");
		
		
	} // ends Euler12 constructor
	
	//
	//
	public void findNextTrig()
	{
		triangleIndex++;
		lastTriangleNumber=currentTriangleNumber;
		currentTriangleNumber+=triangleIndex;
		
		
	} // ends findNextTrig()
	
	public void findDiv()
	{
		int root= (int)(Math.sqrt(currentTriangleNumber));
		
		for(int i=1; i<root; i++)
		{
			if(currentTriangleNumber%i==0)
			{   
				factors+=2;
			}
			
			if(factors>=numDivisors)
			{
				isFull=true;
				break;
			}
			
			//System.out.println("No Solution Found: "+ currentTriangleNumber);
		} // ends for loop
	} // ends findDiv
	
	
} // end class
